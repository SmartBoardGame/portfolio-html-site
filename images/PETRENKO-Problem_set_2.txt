==============================================================================================================================================================
                                                                              1
--------------------------------------------------------------------------------------------------------------------------------------------------------------
(a)

    CD
    AC
    EF
    HI
    GI
    AB
    EG
    DI

--------------------------------------------------------------------------------------------------------------------------------------------------------------
(b)

    AC
    CD
    AB
    DI
    HI
    GI
    EG
    EF

--------------------------------------------------------------------------------------------------------------------------------------------------------------
(c)

Step 1: 
    For every node != starting node, find the cheapest incomming edge cost.

    A = skip
    B = 22
    C = 9
    D = 4
    E = 33
    F = 18
    G = 23
    H = 24
    I = 19


Step 2: 
    For every node != starting node, subtract the cost found in 'step 1' 
    from all other edges that enter this current node.

    NOTE: I'll skip this step, because we can get 
          the Minimum spanning arborescence already. 

Step 3: 
    Run a DFS from the root node.
    If we got a tree (all nodes have been discovered after this DFS) 
        then we are done - resulting DFS tree is our answer.
    If we didn't get a tree (there were some cycles present), then 
        shrink all cycles into single nodes, and go back to 'step 1'.

In the given graph, we were able to terminate after only one such 
'min edge weight subtracton' operation, so we can just return the answer: 

    AB
    AC
    CD
    DE
    EG
    EF
    FH
    HI

--------------------------------------------------------------------------------------------------------------------------------------------------------------



==============================================================================================================================================================
                                                                              2
--------------------------------------------------------------------------------------------------------------------------------------------------------------
(a)

Recurrence relation:
    T(n) = 5T(n / 2) + Θ(n^2)

Process:
    a = 5
    b = 2
    c = 2
    log2(5) ≈ 2.3

Running time:
    Θ( n^(log2(5)) )


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(b)

Recurrence relation:
    T(n) = 2T(n / 4) + Θ(n)

Process:
    a = 2
    b = 4
    c = 1
    log4(2) ≈ 1.2

Running time:
    Θ( n^(log4(2)) )


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(c)

Recurrence relation:
    T(n) = 8T(n / 2) + Θ(n^3)

Process:
    a = 8
    b = 2
    c = 3
    log2(8) = 3

Running time:
    Θ( n^3 * log(n) )


--------------------------------------------------------------------------------------------------------------------------------------------------------------



==============================================================================================================================================================
                                                                              3
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Assumption 1:
    My algorithm should only conform to the running time of O(n log n).

Assumption 2:
    Divide and conquer algorithm for finding closest pair of points on the plane 
    that was discussed in class is correct and runs in O(n log n), when implemented correctly.


Solution:
    To find the first closest pair of points, I will use the algorithms that we've discussed in class.
    This first run of the algorithm will give me a pair of points (Pi, Pj).
    
    To find the second closest pair of points, I will run the algorims two more times. 
    The only difference between second and third run of the algorithm, as opposed to the first run 
    is that I will not consider all the points while running my algorims second and third time.
    
    On the second run of the algorithm, I will consider all the points minus the point Pi.
    On the third run of the algorithm, I will consider all the points minus the point Pj.
    After running the algorims second and third time, I will get two more pairs of points 
    (in addition to the first closes pair of points). To get the second closest pair of points, 
    I will choose the pair who's distance is smaller.


Proof of correctness:
    To prove that my solution is indeed correct, let's veiw all the distances between all the points as 
    a set {D(p0, p1), D(p0, p2),... D(p0, pn),... D(p5, pn)...}.
    
    Now, when I run my algorithm on this set for the first time, I am getting the proper 
    first closest pair of points, which we've proved in class to be correct.
    To get the second closest pair of points, I need to run my algorithm on the same set of distances, 
    without the D(Pi, Pj). This way, I will get the next closest distance.
    
    By running my algorithm on the two sets 
        1) all the distances between point Pi and all other points, 
        2) all the distances between point Pj and all other points,
    I am getting rid of the element D(Pi, Pj), which was my first closest pair. 
    Therefore, I am getting the second closest pair of points on the plain (after choosing the smallest).


Running time analysis:
    Because I'm sequentially running the same algorithm 3 times, my overall runtime is O(n log n).


--------------------------------------------------------------------------------------------------------------------------------------------------------------



==============================================================================================================================================================
                                                                              4
--------------------------------------------------------------------------------------------------------------------------------------------------------------
(a)

Goal:
    
    OPT(n) = optimal value of all jobs taken on day 'n'


Definitions:
    
    OPT(j) = optimal sum of all the values of jobs that are included in the solution set, untill day 'j'

    s[*] = array of values of short jobs
    s[j] = value of a short job that starts on day 'j'

    l[*] = array of values of long jobs
    l[j] = value of a long job that starts on day 'j'


Bellman Equation:
    
    OPT(j) = { 
               0                                                            if j = 0
               s[0]                                                         if j = 1
               max { OPT(j - 1) + s[j], OPT(j - 2) + l[j - 1] }             if j > 1
             }


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(b)

Idea:

I decided to use dp approach to solving this problem, because this problem has both: 
    1. Overlapping subproblems property 
    2. Optimal substructure property

My goal is to choose a set of non-overlaping jobs, starting on day '0' and going untill day 'n'. 
This set of jobs must maximize the sum over all the job's values.

First key observation is that all the jobs have non-negative values (my assumption), which means 
that if I can take a job on day 'i', then taking a job on day 'i' will not decrease my overall sum. 
Therefore, it makes sence for me to be taking a new job as soon as I can.

Second key observation is that if I somehow knew the optimal solution for days 'j - 1' <--- all days before the current day 'j' 
then I could get the optinal solution for day 'j' by comparing: 
    the optimal solution of day 'j - 1' + value of a short job for today's day s[j] 
            with
    the optimal solution of day 'j - 2' + value of long job from yerdaday l[j - 1]

Second observation allows me to deduct the Bellman equation for this problem.


Algorithm:

1) Create a memoTable[] array of size equals to the number of days 'd'.

2) Initialize the base cases of: 
        memoTable[0] = 0    <--- we don't have any day's, total value is zero,
        memoTable[1] = s[0] <--- we only have one day, therefore we can only do first short job.

3) Run my recursive algorithm in Top-Down manner.

4) Return the answer.

Pseudo Code:

    Solution(d, s[], l[])
    {
        memoTable[]
        for( i = 0, i <= d, ++i )
            memoTable[i] = -1

        memoTable[0] = 0
        memoTable[1] = s[0]

        return Compute_Opt(j)
    }

    Compute_Opt(j)
    {
        if( memoTable[j] == -1 )
        {
            memoTable[j] = max( Compute_Opt(j - 1) + s[j], Compute_Opt(j - 2) + l[j - 1] )
        }

        return memoTable[j]
    }


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(c)

Running Time Analysis:

    I only computing OPT(j) ones, then my memoTable is storing the results.
    I need to compute OPT(j) for all days from '0' utill 'd'. 
    Therefore, the total time complexity of my solution is proportinal to the input parameter 'd'.

    Answer: Θ(d)


Memory Requirement Analysis:
    
    I only need to store a 1-D array 'memoTable' of size 'd'.
    Therefore, I use memory proportional to the input parameter 'd'.
    My call-stack will be at most 'd', so it's still 'd'.
    
    Answer: Θ(d)


--------------------------------------------------------------------------------------------------------------------------------------------------------------



==============================================================================================================================================================
                                                                              5
--------------------------------------------------------------------------------------------------------------------------------------------------------------
(a)

Goal:

    OPT(n) = maximum profit from selling 'n' candies


Definitions:

    OPT(j) = maximum profit from selling 'j' candies

    p[*] = array of values which represent profits of selling candies
    p[j] = profit of selling 'j' candies in one operation

    i = number of candies I can sell, this number must be 0 <= i <= j


Bellman Equation:
    
    OPT(j) = {
               0                                                    if j = 0
               max             { OPT(j - i) + p[i] }                if j > 1
               (0 <= i <= j)
             }


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(b)

Idea:

    This problme looks similar to the coins-exchange problem, so I'll use the same logic for this one.

    I know that when I have 'j' candies, I can sell sets of 1, 2, 3,... j - 1, j candies together.

    I also know that p[*] array have such sets ordered, and each element in array p[*] has corresponding profit value.

    Now, if I sell less than 'j' candies, I'll have some remainder number of candies i left to sell.

    My goal is to maximaze the sum of OPT(j - i) and p[i].


Algorithm:

1) Create a memoTable[] array that will hold optimal values of selling candies.
   Each index of this array will represent optimal value of selling 'index' number of candies.

2) Initialize the base case for memoTable[0] to be equal to zero (we don't profit if we didn't sell anything).

3) In a Bottom-up manner, start computing OPT(j) by using my Bellman Equation from above.

4) Return the answer.


Pseudo Code:

    Solution(n, p[])
    {
        memoTable[]             <--- size of this array is n + 1
        memoTable[0] = 0        <--- base case

        for( j = 1; j <= n; ++j )
        {
            memoTable[j] = 0
            
            for( i = 0; i < j; ++i )
            {
                memoTable[j] = max( memoTable[j], memoTable[j - i] + p[i] )
            }
        }

        return memoTable[n];    <--- return the answer
    }


--------------------------------------------------------------------------------------------------------------------------------------------------------------
(c)

Running Time Analysis:

    I'm got two loops, one nested one and one outter one.
    The nested loop runs 0, 1, 2,... n - 1, n times, which gives me quadratic runtime overall.

    Answer: Θ(n^2)


Memory Requirement Analysis:

    I'm only storing a 1-d array of size 'n'.

    Answer: Θ(n)


--------------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================================
